"use strict";(self.webpackChunkauto_traffic_control=self.webpackChunkauto_traffic_control||[]).push([[37],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,p(p({ref:t},l),{},{components:n})):r.createElement(f,p({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,p=new Array(a);p[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,p[1]=i;for(var c=2;c<a;c++)p[c]=n[c];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6627:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={title:"Map"},p="MapService",i={unversionedId:"api/Services/map-service",id:"api/Services/map-service",title:"Map",description:"The MapService can be queried to get the map of the current game session, or",source:"@site/docs/api/Services/map-service.md",sourceDirName:"api/Services",slug:"/api/Services/map-service",permalink:"/docs/api/Services/map-service",draft:!1,editUrl:"https://github.com/jdno/auto-traffic-control/tree/main/docs/docs/api/Services/map-service.md",tags:[],version:"current",frontMatter:{title:"Map"},sidebar:"api",previous:{title:"Game",permalink:"/docs/api/Services/game-service"}},s={},c=[{value:"Get Map",id:"get-map",level:2},{value:"Request",id:"request",level:3},{value:"Response",id:"response",level:3},{value:"Node to Point",id:"node-to-point",level:2},{value:"Request",id:"request-1",level:3},{value:"Response",id:"response-1",level:3}],l={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mapservice"},(0,o.kt)("inlineCode",{parentName:"h1"},"MapService")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"MapService")," can be queried to get the map of the current game session, or\nto convert between the different coordinate systems."),(0,o.kt)("h2",{id:"get-map"},"Get Map"),(0,o.kt)("p",null,"The map used in the current game session can be retrieved using the ",(0,o.kt)("inlineCode",{parentName:"p"},"GetMap"),"\nendpoint."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"rpc GetMap(GetMapRequest) returns (GetMapResponse);\n")),(0,o.kt)("h3",{id:"request"},"Request"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"message GetMapRequest {}\n")),(0,o.kt)("h3",{id:"response"},"Response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"message GetMapResponse {\n  Map map = 1;\n}\n")),(0,o.kt)("h2",{id:"node-to-point"},"Node to Point"),(0,o.kt)("p",null,"Nodes are a location on the routing grid, while points are a location on the\nmap. A ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/types#node"},(0,o.kt)("inlineCode",{parentName:"a"},"Node"))," can be converted to a\n",(0,o.kt)("a",{parentName:"p",href:"/docs/api/types#point"},(0,o.kt)("inlineCode",{parentName:"a"},"Point"))," through the ",(0,o.kt)("inlineCode",{parentName:"p"},"NodeToPoint")," endpoint, but points\ncannot be converted to nodes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"rpc NodeToPoint(NodeToPointRequest) returns (NodeToPointResponse);\n")),(0,o.kt)("h3",{id:"request-1"},"Request"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"message NodeToPointRequest {\n  Node node = 1;\n}\n")),(0,o.kt)("h3",{id:"response-1"},"Response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"message NodeToPointResponse {\n  Point point = 1;\n}\n")))}u.isMDXComponent=!0}}]);