"use strict";(self.webpackChunkauto_traffic_control=self.webpackChunkauto_traffic_control||[]).push([[706],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(n),h=r,u=m["".concat(p,".").concat(h)]||m[h]||d[h]||i;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2609:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:6},p="Receiving Events",l={unversionedId:"tutorial/events",id:"tutorial/events",title:"Receiving Events",description:"Auto Traffic Control's API is heavily inspired by",source:"@site/docs/tutorial/events.md",sourceDirName:"tutorial",slug:"/tutorial/events",permalink:"/docs/tutorial/events",draft:!1,editUrl:"https://github.com/jdno/auto-traffic-control/tree/main/docs/docs/tutorial/events.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docs",previous:{title:"Starting a Game",permalink:"/docs/tutorial/game"},next:{title:"Rules",permalink:"/docs/rules"}},c={},d=[{value:"Events in TypeScript",id:"events-in-typescript",level:2},{value:"Processing a <code>StreamResponse</code>",id:"processing-a-streamresponse",level:2},{value:"Exiting the program",id:"exiting-the-program",level:3},{value:"Creating a flight plan",id:"creating-a-flight-plan",level:3},{value:"Subscribing to events",id:"subscribing-to-events",level:2},{value:"Playing a game",id:"playing-a-game",level:2},{value:"Choosing your own adventure",id:"choosing-your-own-adventure",level:2}],m={toc:d};function h(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"receiving-events"},"Receiving Events"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Auto Traffic Control's")," API is heavily inspired by\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://danielwhittaker.me/2020/02/20/cqrs-step-step-guide-flow-typical-application/"},"CQRS + Event Sourcing"),"\nsoftware patterns. The game streams ",(0,i.kt)("em",{parentName:"p"},"events")," to players, who can respond by\nsending ",(0,i.kt)("em",{parentName:"p"},"commands")," to the game. You can find a list of the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/events"},"game's events")," in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api"},"API documentation"),"."),(0,i.kt)("h2",{id:"events-in-typescript"},"Events in TypeScript"),(0,i.kt)("p",null,"Before diving into the implementation, let's take a brief moment to familiarize\nourselves with the data that we'll be dealing with."),(0,i.kt)("p",null,"Our goal for this chapter is to subscribe to the game's event stream. The stream\nis provided by the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/Services/event-service"},(0,i.kt)("inlineCode",{parentName:"a"},"EventService"))," through its ",(0,i.kt)("inlineCode",{parentName:"p"},"stream")," method. If we check the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/Services/event-service"},"documentation"),", we can find this method signature:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"rpc Stream(StreamRequest) returns (stream StreamResponse) {}\n")),(0,i.kt)("p",null,"What this tells us is that when we subscribe to the event stream by calling the\n",(0,i.kt)("inlineCode",{parentName:"p"},"stream")," method on the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/Services/event-service"},(0,i.kt)("inlineCode",{parentName:"a"},"EventService")),", we get back an iterator that yields\n",(0,i.kt)("inlineCode",{parentName:"p"},"StreamResponse")," objects. The definition of those can also be found in the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/Services/event-service"},"documentation"),", or alternatively directly in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jdno/auto-traffic-control/tree/main/api"},"API specification"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"message StreamResponse {\n  oneof event {\n    AirplaneCollided airplane_collided = 1;\n    AirplaneDetected airplane_detected = 2;\n    AirplaneLanded airplane_landed = 3;\n    AirplaneMoved airplane_moved = 4;\n    FlightPlanUpdated flight_plan_updated = 5;\n    LandingAborted landing_aborted = 6;\n    GameStarted game_started = 7;\n    GameStopped game_stopped = 8;\n  }\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"oneof")," key is similar to an ",(0,i.kt)("inlineCode",{parentName:"p"},"enum"),", and means that the response will\ncontain one of these events. Depending on the programming language, the\ngenerated code might be an actual ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," or something a little bit more\ncomplicated."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"You can probably inspect the generated code inside")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"the ",(0,i.kt)("inlineCode",{parentName:"p"},"auto-traffic-control"),"\npackage using your editor or IDE. This can be helpful to understand the\ninternals of the SDK and how to work with the different data types."))),(0,i.kt)("p",null,"In ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org"},"TypeScript"),", it's a little bit more complicated. If we look inside the\npackage for the generated code, we can see that ",(0,i.kt)("inlineCode",{parentName:"p"},"StreamResponse")," is an object\nwith fields for each variant. It also has an ",(0,i.kt)("inlineCode",{parentName:"p"},"enum")," called ",(0,i.kt)("inlineCode",{parentName:"p"},"EventCase")," that lets\nus know what event we are dealing with. But ",(0,i.kt)("a",{parentName:"p",href:"https://grpc.io"},"gRPC")," sadly does not allow us to\nwork with the ",(0,i.kt)("em",{parentName:"p"},"names")," of the enum variants, only with their integer values."),(0,i.kt)("p",null,"We'll therefore take a different approach and work with the ",(0,i.kt)("inlineCode",{parentName:"p"},"StreamResponse"),"\nobject and not the ",(0,i.kt)("inlineCode",{parentName:"p"},"EventCase"),"."),(0,i.kt)("h2",{id:"processing-a-streamresponse"},"Processing a ",(0,i.kt)("inlineCode",{parentName:"h2"},"StreamResponse")),(0,i.kt)("p",null,"Let's start by creating a function that will process each message in the event\nstream. The function takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"StreamResponse")," object as its parameter, and it\ndoes not return anything:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"function processMessage(streamResponse: StreamResponse): void {}\n")),(0,i.kt)("p",null,"We have two goals for now:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Detect when an airplane is spawned and needs a new flight plan"),(0,i.kt)("li",{parentName:"ol"},"End the program when the game ends")),(0,i.kt)("p",null,"We can check if one of these events happened by testing whether the\ncorresponding field has been set on the ",(0,i.kt)("inlineCode",{parentName:"p"},"StreamResponse")," object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"function processMessage(streamResponse: StreamResponse): void {\n  const airplaneDetected = streamResponse.getAirplaneDetected();\n  if (airplaneDetected != undefined) {\n    updateFlightPlan(airplaneDetected);\n  }\n\n  const gameStopped = streamResponse.getGameStopped();\n  if (gameStopped != undefined) {\n    exit(gameStopped);\n  }\n}\n")),(0,i.kt)("h3",{id:"exiting-the-program"},"Exiting the program"),(0,i.kt)("p",null,"When the game ends, i.e. we receive the ",(0,i.kt)("inlineCode",{parentName:"p"},"GameStopped")," event, we want to print\nthe score and exit the program. Let's create a new function that takes the\n",(0,i.kt)("inlineCode",{parentName:"p"},"GameStopped")," event as a parameter, prints the score from the event, and then\nexits:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"function processMessage(streamResponse: StreamResponse): void {\n  // airplane detected\n\n  const gameStopped = streamResponse.getGameStopped();\n  if (gameStopped != undefined) {\n    exit(gameStopped);\n  }\n}\n\nfunction exit(event: GameStopped): void {\n  const score = event.getScore();\n\n  console.log(`Game stopped! Score: ${score}`);\n  process.exit();\n}\n")),(0,i.kt)("h3",{id:"creating-a-flight-plan"},"Creating a flight plan"),(0,i.kt)("p",null,"The second event that we are listening for is the ",(0,i.kt)("inlineCode",{parentName:"p"},"AirplaneDetected")," event. When\nthis event occurs, a new airplane has entered the map. Airplanes are spawned\nwith a random flight plan, which means they'll wander around the map aimlessly."),(0,i.kt)("p",null,"We want to generate a new flight plan for the aircraft, which requires the\nfollowing information:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The tag (i.e. color) of the airplane"),(0,i.kt)("li",{parentName:"ul"},"The first node in the airplane's current flight plan"),(0,i.kt)("li",{parentName:"ul"},"The location of the airport with the matching tag")),(0,i.kt)("p",null,"The first two can be retrieved from the ",(0,i.kt)("inlineCode",{parentName:"p"},"AirplaneDetected")," event, while the last\nrequires an API request to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/api/Services/map-service"},(0,i.kt)("inlineCode",{parentName:"a"},"MapService")),"."),(0,i.kt)("p",null,"I'll leave the implementation of this as a challenge for the reader. The\nfollowing snippet simply prints a message including the airplane's ID and next\ndestination."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'function processMessage(streamResponse: StreamResponse): void {\n  const airplaneDetected = streamResponse.getAirplaneDetected();\n  if (airplaneDetected != undefined) {\n    updateFlightPlan(airplaneDetected);\n  }\n\n  // game stopped\n}\n\nfunction updateFlightPlan(event: AirplaneDetected): void {\n  const airplane = event.getAirplane();\n  if (airplane == undefined) {\n    throw new Error("Received AirplaneDetected event without an airplane");\n  }\n\n  const id = airplane.getId();\n  const flightPlan = airplane.getFlightPlanList();\n  const nextNode = flightPlan.at(0);\n\n  console.log(`Detected airplane ${id} heading towards ${nextNode}.`);\n}\n')),(0,i.kt)("h2",{id:"subscribing-to-events"},"Subscribing to events"),(0,i.kt)("p",null,"Let's create a new function that subscribes the program to the game's event\nstream. We start as we usually do by initializing a client for the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/Services/event-service"},(0,i.kt)("inlineCode",{parentName:"a"},"EventService")),", and then calling its ",(0,i.kt)("inlineCode",{parentName:"p"},"stream")," endpoint:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'function subscribeToEvents(): void {\n  const eventService = new EventServiceClient(\n    "localhost:4747",\n    getCredentials()\n  );\n\n  const stream = eventService.stream(new StreamRequest());\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"stream")," method returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"ClientReadableStream")," object. We can register an\nevent listener on this object that gets called every time a new message is\nreceived:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'stream.on("data", processMessage);\n')),(0,i.kt)("p",null,"We also want to gracefully handle the end of the stream, e.g. when the game gets\nquit. We can do this by listening for the ",(0,i.kt)("inlineCode",{parentName:"p"},"end")," event on the stream object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'stream.on("end", streamClosed);\n')),(0,i.kt)("p",null,"Combining everything, this is how our function looks in the end:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'function subscribeToEvents(): void {\n  const eventService = new EventServiceClient(\n    "localhost:4747",\n    getCredentials()\n  );\n\n  const stream = eventService.stream(new StreamRequest());\n\n  stream.on("data", processMessage);\n  stream.on("end", streamClosed);\n}\n')),(0,i.kt)("h2",{id:"playing-a-game"},"Playing a game"),(0,i.kt)("p",null,"We can now put everything together. Let's take our previous ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," function, and\nextract its content into a new function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'function startGame(): void {\n  const gameService = new GameServiceClient("localhost:4747", getCredentials());\n\n  gameService.startGame(new StartGameRequest(), (err) => {\n    if (err != null) {\n      throw err;\n    }\n\n    console.log("Started a new game. Good luck!");\n  });\n}\n')),(0,i.kt)("p",null,"We can now update the ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," function to first subscribe to the event stream,\nand then start a new game:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"function main() {\n  subscribeToEvents();\n  startGame();\n}\n")),(0,i.kt)("p",null,"Fire up the ",(0,i.kt)("strong",{parentName:"p"},"itch")," app and launch ",(0,i.kt)("strong",{parentName:"p"},"Auto Traffic Control"),". Then start your\nprogram with ",(0,i.kt)("inlineCode",{parentName:"p"},"npm start"),", and watch the game. Airplanes will start to spawn\naround the map, and the program will print their ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and next node to the\nterminal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ npm start\n\n> node-traffic-controller@0.0.0 start\n> npx ts-node src/main.ts\n\nStarted a new game. Good luck!\nDetected airplane AT-0001 heading towards 11,-6.\nDetected airplane AT-0002 heading towards -11,-3.\nDetected airplane AT-0003 heading towards 4,8.\nDetected airplane AT-0004 heading towards 11,3.\nDetected airplane AT-0005 heading towards 5,-8.\nDetected airplane AT-0006 heading towards 11,-7.\nDetected airplane AT-0007 heading towards -11,1.\nDetected airplane AT-0008 heading towards -2,-8.\nGame stopped! Score: 0\n")),(0,i.kt)("p",null,"Congrats! \ud83c\udf89 You now know the basics of how to play the game."),(0,i.kt)("h2",{id:"choosing-your-own-adventure"},"Choosing your own adventure"),(0,i.kt)("p",null,"There is still a lot to discover and figure out, but you've learned the basics\nof ",(0,i.kt)("strong",{parentName:"p"},"Auto Traffic Control")," and its API. Most importantly, you know how to start\na game and watch the event stream for changes in the game world. This is a great\nplace from which to start exploring!"),(0,i.kt)("p",null,"The next step should probably be figuring out how to generate a flight plan for\nan airplane. As mentioned earlier, this requires that you know not only the\ncurrent position of the airplane but also its destination. You can use the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/Services/map-service"},(0,i.kt)("inlineCode",{parentName:"a"},"MapService"))," to query the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/types#map"},(0,i.kt)("inlineCode",{parentName:"a"},"Map"))," and find out where the airports are."),(0,i.kt)("p",null,"Once you know where you are and where you want to go, it's time to figure out\nthe path. You can either implement your own path finding algorithm or look for a\nlibrary. Popular path finding algorithms for games are\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"},"Dijkstra's algorithm")," and\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/A*_search_algorithm"},"A","*"),", and it can be great fun\nto implement them yourself. Or you can search ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/"},"npm")," for\na library that you can just plug into your program."),(0,i.kt)("p",null,"And path finding is really just the beginning..."))}h.isMDXComponent=!0}}]);