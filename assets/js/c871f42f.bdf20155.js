"use strict";(self.webpackChunkauto_traffic_control=self.webpackChunkauto_traffic_control||[]).push([[917],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),f=a,m=d["".concat(o,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9900:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return f},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],p={title:"Airplane"},o="AirplaneService",s={unversionedId:"api/Services/airplane-service",id:"api/Services/airplane-service",title:"Airplane",description:"The AirplaneService implements the API endpoints that interact with airplanes",source:"@site/docs/api/Services/airplane-service.md",sourceDirName:"api/Services",slug:"/api/Services/airplane-service",permalink:"/docs/api/Services/airplane-service",draft:!1,editUrl:"https://github.com/jdno/auto-traffic-control/tree/main/docs/docs/api/Services/airplane-service.md",tags:[],version:"current",frontMatter:{title:"Airplane"},sidebar:"api",previous:{title:"Types",permalink:"/docs/api/types"},next:{title:"Auto Traffic Control",permalink:"/docs/api/Services/atc-service"}},c={},u=[{value:"Get Airplane",id:"get-airplane",level:2},{value:"Request",id:"request",level:3},{value:"Response",id:"response",level:3},{value:"Update Flight Plan",id:"update-flight-plan",level:2},{value:"Request",id:"request-1",level:3},{value:"Response",id:"response-1",level:3}],d={toc:u};function f(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"airplaneservice"},(0,i.kt)("inlineCode",{parentName:"h1"},"AirplaneService")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"AirplaneService")," implements the API endpoints that interact with airplanes\nin the game. Most importantly, it can be used to update the flight plan of each\nairplane."),(0,i.kt)("h2",{id:"get-airplane"},"Get Airplane"),(0,i.kt)("p",null,"The state of each airplane can be queried with the ",(0,i.kt)("inlineCode",{parentName:"p"},"GetAirplane")," request. It\ntakes the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," of the airplane as an argument, and returns an instance of the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/api/types#airplane"},(0,i.kt)("inlineCode",{parentName:"a"},"Airplane"))," message type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"rpc GetAirplane(GetAirplaneRequest) returns (GetAirplaneResponse);\n")),(0,i.kt)("h3",{id:"request"},"Request"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"message GetAirplaneRequest {\n  string id = 1;\n}\n")),(0,i.kt)("h3",{id:"response"},"Response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"message GetAirplaneResponse {\n  Airplane airplane = 1;\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("a",{parentName:"li",href:"https://grpc.github.io/grpc/core/md_doc_statuscodes.html"},"status code")," ",(0,i.kt)("inlineCode",{parentName:"li"},"NOT_FOUND")," will be returned when no airplane with the given\n",(0,i.kt)("inlineCode",{parentName:"li"},"id")," can be found.")),(0,i.kt)("h2",{id:"update-flight-plan"},"Update Flight Plan"),(0,i.kt)("p",null,"The flight plan of an airplane can be updated with the ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateFlightPlan"),"\nrequest. The request takes the airplane's ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and the new flight plan as an\nargument, and returns either a success or error response."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"rpc UpdateFlightPlan(UpdateFlightPlanRequest) returns (UpdateFlightPlanResponse);\n")),(0,i.kt)("h3",{id:"request-1"},"Request"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"message UpdateFlightPlanRequest {\n  string id = 1;\n  repeated Node flight_plan = 2;\n}\n")),(0,i.kt)("h3",{id:"response-1"},"Response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"message UpdateFlightPlanResponse {\n  oneof payload {\n    UpdateFlightPlanSuccess success = 1;\n    UpdateFlightPlanError error = 2;\n  }\n}\n")),(0,i.kt)("p",null,"When the flight plan is successfully updated, an empty response will be\nreturned."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"message UpdateFlightPlanSuccess {}\n")),(0,i.kt)("p",null,"When the flight plan cannot be updated, e.g. because the provided plan is not\nvalid, a list of validation errors is returned."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-protobuf"},"message UpdateFlightPlanError {\n  enum ValidationError {\n    UNSPECIFIED = 0;\n    NODE_OUTSIDE_MAP = 1;\n    INVALID_STEP = 2;\n    SHARP_TURN = 3;\n    INVALID_START = 4;\n    RESTRICTED_NODE = 5;\n  }\n  repeated ValidationError errors = 1;\n}\n")))}f.isMDXComponent=!0}}]);